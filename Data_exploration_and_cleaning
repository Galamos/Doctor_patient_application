{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Mining and Preprocessing\n",
    "#### The purpose of this notebook is to explore and preprocess the data which will in order to prepare it for the application's recommender engine. The data utilized here is a small sample of medical specialists in Yaounde, Cameroon. The recommender system will be built to match users-patients to medical specialists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import statements for all relevant libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from surprise import Reader\n",
    "from collections import defaultdict\n",
    "from surprise import Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Import and Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the specialist and rating data as dataframes\n",
    "specialists = pd.read_csv(\"specialist.csv\")\n",
    "ratings = pd.read_csv(\"specialists_ratings.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(402, 8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the size of each dataframe\n",
    "specialists.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(220, 3)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 402 entries, 0 to 401\n",
      "Data columns (total 8 columns):\n",
      "Id             401 non-null float64\n",
      "name           401 non-null object\n",
      "specialty      401 non-null object\n",
      "institution    401 non-null object\n",
      "location       401 non-null object\n",
      "days           401 non-null object\n",
      "language       401 non-null object\n",
      "telephone      401 non-null float64\n",
      "dtypes: float64(2), object(6)\n",
      "memory usage: 25.2+ KB\n"
     ]
    }
   ],
   "source": [
    "#Get basic details about the dataframe constituents\n",
    "specialists.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As shown above, the specialists dataset contains data specific to each specialist in the database with regards to their name, specialty, institution, location, days of work, their language and their telephone number. This data could be considered as their demographic data. This demographic info will be used to match them to create the right specialist profile for the user's needs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 220 entries, 0 to 219\n",
      "Data columns (total 3 columns):\n",
      "user_id          220 non-null int64\n",
      "specialist_id    220 non-null int64\n",
      "ratings          220 non-null int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 5.3 KB\n"
     ]
    }
   ],
   "source": [
    "ratings.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>name</th>\n",
       "      <th>specialty</th>\n",
       "      <th>institution</th>\n",
       "      <th>location</th>\n",
       "      <th>days</th>\n",
       "      <th>language</th>\n",
       "      <th>telephone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>DR YOMBA</td>\n",
       "      <td>CARDIOLOGIST</td>\n",
       "      <td>Le Jourdain</td>\n",
       "      <td>Nlongkak</td>\n",
       "      <td>Monday|Wednesday</td>\n",
       "      <td>French</td>\n",
       "      <td>2.376110e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>DR BOOMBHI</td>\n",
       "      <td>CARDIOLOGIST</td>\n",
       "      <td>Le Jourdain</td>\n",
       "      <td>Nlongkak</td>\n",
       "      <td>Tuesday|Wednesday|Thursday</td>\n",
       "      <td>French</td>\n",
       "      <td>2.376110e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>DR GRACE OKORO</td>\n",
       "      <td>DERMATOLOGIST</td>\n",
       "      <td>Le Jourdain</td>\n",
       "      <td>Nlongkak</td>\n",
       "      <td>Monday|Tuesday|Saturday+F4:F118</td>\n",
       "      <td>French</td>\n",
       "      <td>2.376110e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>DR TSONGUI</td>\n",
       "      <td>DERMATOLOGIST</td>\n",
       "      <td>Le Jourdain</td>\n",
       "      <td>Nlongkak</td>\n",
       "      <td>Thursday|Friday|Saturday</td>\n",
       "      <td>French</td>\n",
       "      <td>2.376110e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>DR ATEBA</td>\n",
       "      <td>ENDOCRINOLOGIST</td>\n",
       "      <td>Le Jourdain</td>\n",
       "      <td>Nlongkak</td>\n",
       "      <td>Monday|Tuesday|Thursday</td>\n",
       "      <td>French</td>\n",
       "      <td>2.376110e+11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id            name        specialty  institution  location  \\\n",
       "0  1.0        DR YOMBA     CARDIOLOGIST  Le Jourdain  Nlongkak   \n",
       "1  2.0      DR BOOMBHI     CARDIOLOGIST  Le Jourdain  Nlongkak   \n",
       "2  3.0  DR GRACE OKORO    DERMATOLOGIST  Le Jourdain  Nlongkak   \n",
       "3  4.0      DR TSONGUI    DERMATOLOGIST  Le Jourdain  Nlongkak   \n",
       "4  5.0        DR ATEBA  ENDOCRINOLOGIST  Le Jourdain  Nlongkak   \n",
       "\n",
       "                              days language     telephone  \n",
       "0                 Monday|Wednesday   French  2.376110e+11  \n",
       "1       Tuesday|Wednesday|Thursday   French  2.376110e+11  \n",
       "2  Monday|Tuesday|Saturday+F4:F118   French  2.376110e+11  \n",
       "3         Thursday|Friday|Saturday   French  2.376110e+11  \n",
       "4          Monday|Tuesday|Thursday   French  2.376110e+11  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get a preview of the dataframes\n",
    "specialists.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>specialist_id</th>\n",
       "      <th>ratings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>177</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>391</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>365</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>356</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  specialist_id  ratings\n",
       "0        1            177        5\n",
       "1        1             28        1\n",
       "2        1            391        4\n",
       "3        1            365        5\n",
       "4        1            356        3"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The table above displays a preview of the ratings of the specialists in the datasets. The ratings are between 1 and 5 with 1 implying that the user was unsatisfied by the specialist's services and 5 implying that the specialist provides stellar services."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for the existence of null values\n",
    "specialists.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.isnull().values.any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id             1\n",
       "name           1\n",
       "specialty      1\n",
       "institution    1\n",
       "location       1\n",
       "days           1\n",
       "language       1\n",
       "telephone      1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Return the count of null values\n",
    "specialists.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>name</th>\n",
       "      <th>specialty</th>\n",
       "      <th>institution</th>\n",
       "      <th>location</th>\n",
       "      <th>days</th>\n",
       "      <th>language</th>\n",
       "      <th>telephone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id name specialty institution location days language  telephone\n",
       "401 NaN  NaN       NaN         NaN      NaN  NaN      NaN        NaN"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Return the row which has the missing data\n",
    "null_data = specialists[specialists.isnull().any(axis=1)]\n",
    "null_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(401, 8)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dropping the empty row\n",
    "specialists = specialists.drop(401)\n",
    "specialists.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Export the clean data to a csv file for future use\n",
    "specialists.to_csv('.\\specialistLens.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ratings data is going to be explored to discover if there is any existent pattern or anything interesting to pick from the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>specialist_id</th>\n",
       "      <th>ratings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12.277273</td>\n",
       "      <td>191.795455</td>\n",
       "      <td>3.059091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.557120</td>\n",
       "      <td>116.307296</td>\n",
       "      <td>1.398355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>179.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.000000</td>\n",
       "      <td>293.500000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>396.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          user_id  specialist_id     ratings\n",
       "count  220.000000     220.000000  220.000000\n",
       "mean    12.277273     191.795455    3.059091\n",
       "std      6.557120     116.307296    1.398355\n",
       "min      1.000000       2.000000    1.000000\n",
       "25%      8.000000      83.000000    2.000000\n",
       "50%     12.000000     179.000000    3.000000\n",
       "75%     16.000000     293.500000    4.000000\n",
       "max     25.000000     396.000000    5.000000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preprocessing\n",
    "#### In this step, the data will be restructure to make it easier to use when creating the recommender system. The end goal is to have a dataframe with 3 main parameters, the id, the title and the attributes which are the specialty, institution, location, days, language and phone number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Now the last 6 columns are going to be merged into 1 column called attributes\n",
    "specialists['attributes'] = specialists['specialty'] + '|' + specialists['institution'] + '|' + specialists['location'] + '|' + specialists['days'] + '|' + specialists['language']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The other columns are dropped so that the resulting dataframe has just 3 columns comprising the specialists_id, their name and the attributes which is considered to be their demographic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>name</th>\n",
       "      <th>attributes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>DR YOMBA</td>\n",
       "      <td>CARDIOLOGIST|Le Jourdain|Nlongkak|Monday|Wedne...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>DR BOOMBHI</td>\n",
       "      <td>CARDIOLOGIST|Le Jourdain|Nlongkak|Tuesday|Wedn...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>DR GRACE OKORO</td>\n",
       "      <td>DERMATOLOGIST|Le Jourdain|Nlongkak|Monday|Tues...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>DR TSONGUI</td>\n",
       "      <td>DERMATOLOGIST|Le Jourdain|Nlongkak|Thursday|Fr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>DR ATEBA</td>\n",
       "      <td>ENDOCRINOLOGIST|Le Jourdain|Nlongkak|Monday|Tu...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id            name                                         attributes\n",
       "0  1.0        DR YOMBA  CARDIOLOGIST|Le Jourdain|Nlongkak|Monday|Wedne...\n",
       "1  2.0      DR BOOMBHI  CARDIOLOGIST|Le Jourdain|Nlongkak|Tuesday|Wedn...\n",
       "2  3.0  DR GRACE OKORO  DERMATOLOGIST|Le Jourdain|Nlongkak|Monday|Tues...\n",
       "3  4.0      DR TSONGUI  DERMATOLOGIST|Le Jourdain|Nlongkak|Thursday|Fr...\n",
       "4  5.0        DR ATEBA  ENDOCRINOLOGIST|Le Jourdain|Nlongkak|Monday|Tu..."
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "specialist_clean = specialists.drop(['specialty', 'institution', 'location', 'days', 'language', 'telephone'], axis=1)\n",
    "specialist_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dataframe is exported to csv file\n",
    "specialist_clean.to_csv('.\\specialistClean.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A reader is still needed but only the rating_scale param is requiered.\n",
    "reader = Reader(rating_scale=(1, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The columns must correspond to user id, specialist id and ratings (in that order).\n",
    "rating_data = Dataset.load_from_df(ratings[['user_id', 'specialist_id', 'ratings']], reader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
